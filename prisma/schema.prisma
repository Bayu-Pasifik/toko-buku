// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  passwordHash String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  reviews     Review[]
}

model Book {
  id           Int           @id @default(autoincrement())
  title        String
  author       String
  description  String?
  price        Float
  stock        Int           @default(0)
  coverImageUrl String?
  publishedDate DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categories   BookCategory[]
  reviews      Review[]
  orderItems   OrderItem[]   // Menambahkan relasi dua arah ke OrderItem
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  books       BookCategory[]
}

model BookCategory {
  bookId     Int
  categoryId Int
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([bookId, categoryId])
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int?
  totalPrice  Float
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  items       OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  bookId    Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book      Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("order_items") // Jika ingin menggunakan nama tabel custom di PostgreSQL
}
 
model Review {
  id        Int       @id @default(autoincrement())
  userId    Int?
  bookId    Int
  rating    Int       @default(1) // Handle validation in application logic
  comment   String?
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
}